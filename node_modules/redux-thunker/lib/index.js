'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultConfig = exports.defaultConfig = {
  reduxThunkCompatible: false,
  continuous: false
};

var enhanceArguments = exports.enhanceArguments = function enhanceArguments(extraArguments, injectedArguments) {
  if (!extraArguments || Object.keys(extraArguments).length === 0) {
    return null;
  }
  var keys = Object.keys(extraArguments);
  var enhancedArguments = keys.reduce(function (ea, key) {
    var toBeEnhanced = extraArguments[key];
    if (typeof toBeEnhanced !== 'function') {
      // eslint-disable-next-line max-len
      throw new Error('[redux-thunker] Property ' + key + ' is not a function. Only functions can be enhanced.');
    }
    return _extends({}, ea, _defineProperty({}, key, toBeEnhanced(injectedArguments)));
  }, {});
  return enhancedArguments;
};

var thunkerMiddleware = function thunkerMiddleware() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      extraArguments = _ref.extraArguments,
      extraArgumentsEnhanced = _ref.extraArgumentsEnhanced,
      _ref$config = _ref.config;

  _ref$config = _ref$config === undefined ? defaultConfig : _ref$config;
  var reduxThunkCompatible = _ref$config.reduxThunkCompatible,
      continuous = _ref$config.continuous;
  return function (_ref2) {
    var dispatch = _ref2.dispatch,
        getState = _ref2.getState;
    return function (next) {
      return function (action) {
        if (typeof action === 'function') {
          /**
           * enhance desired arguments
           */
          var enhancedArguments = enhanceArguments(extraArgumentsEnhanced, {
            dispatch: dispatch,
            getState: getState
          });

          /**
           * if backward compatibility with redux-thunk is required
           *
           * usage: (dispatch, getState, { ...extraArgumentsAndEnhancedArguments }) =>
           *
           * otherwise by default
           *
           * usage: ({ dispatch, getState, ...extraArgumentsAndEnhancedArguments }) =>
           *
           * so you don't have to pick disptach or getState when you don't need it
           */

          var actionNext = reduxThunkCompatible ? action(dispatch, getState, _extends({}, extraArguments, enhancedArguments)) : action(_extends({
            dispatch: dispatch,
            getState: getState
          }, extraArguments, enhancedArguments));

          return continuous && typeof next === 'function' ? next(actionNext) : actionNext;
        }

        return next(action);
      };
    };
  };
};

var thunk = thunkerMiddleware();
thunk.extraArguments = thunkerMiddleware;

exports.thunk = thunk;
exports.default = thunkerMiddleware;